#+TITLE: Readme
#+AUTHOR: Jonathan Pieper (ody55eus)
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="source/dark.css">
#+STARTUP: fold

This code generates my webpage.

I created this page using Emacs OrgMode. To learn more about [[https://orgmode.org/][OrgMode]] and [[https://orgmode.org/manual/Publishing.html#Publishing][publishing org files]], see respective links to the original documentation.

* Org Babel Tangle
This Readme contains the entire configuration needed to export the [[id:5064b908-04f6-4167-a66c-072073109ef1][Org Roam (Zettelkasten)]] directory located in [[file:source/][source/]].

The default variables are stored in the [[file:INFO][INFO]] file:

#+INCLUDE: ./INFO

To read these variables, Emacs executes the following line in shell whenever ~gvar(variable)~ gets called in this org file:
#+NAME: gvar
#+begin_src sh :var variable="version" :exports both
cat ./INFO | grep -i $variable | cut --delimiter="|" -f3
#+end_src

#+RESULTS: gvar

For Example, the version is call_gvar().

** Creating Pages
These code blocks create the header of the [[file:init-page.el][init-page.el]] and [[file:publish.el][publish.el]].

*** Init-pages.el
#+begin_src emacs-lisp :tangle ./init-page.el :noweb no-export
;;; init-page.el --- Ody55eus.gitlab.io Webpage -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Jonathan Pieper
;;
;; Author: Jonathan Pieper <https://gitlab.com/ody55eus>
;; Maintainer: Jonathan Pieper <ody55eus@mailbox.org>
;; Created: September 22, 2021
;; Modified: September 22, 2021
;; Version: <<gvar("version")>>
;; Keywords: <<gvar("keywords")>>
;; Homepage: <<gvar("homepage")>>
;; Package-Requires: ((emacs "27.2"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;  These are my emacs tweaks to edit this
;;  webpage using org roam.
;;
;;; Code:
#+end_src
*** Publish.el
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
;;; publish.el --- Ody55eus.gitlab.io Webpage -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Jonathan Pieper
;;
;; Author: Jonathan Pieper <https://gitlab.com/ody55eus>
;; Maintainer: Jonathan Pieper <ody55eus@mailbox.org>
;; Created: September 22, 2021
;; Modified: September 22, 2021
;; Version: <<gvar("version")>>
;; Keywords: <<gvar("keywords")>>
;; Homepage: <<gvar("homepage")>>
;; Package-Requires: ((emacs "27.2"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;  This file configures the export settings of Emacs. It renders the
;;  html template files and exports all org pages as html.
;;
;;; Code:
#+end_src
***

* Writing
This code block lets me set the [[id:5064b908-04f6-4167-a66c-072073109ef1][Org Roam (Zettelkasten)]] directory to the [[file:source/][source/]] folder for the current buffer. Additionally the ~org-roam-capture-templates~ and the ~org-roam-db-location~ are updated to create a new ~org-roam.db~ file and update org capture temlates.

** Init.el
#+begin_warning
Be careful, when using this code. Changing your OrgMode directories can break some configurations. For this reason the variables are only changed in the local buffer. You have to execute ~(jp/init-webpage)~ on every buffer. *There should be a better way to do this (maybe something like [[https://github.com/benoitj/dotfiles/blob/main/dot_emacs-profiles.el][this emacs-profiles.el from benoitj]] or [[https://github.com/benoitj/dotfiles/blob/main/dot_config/doom/config.el#L6][config-local-file]]).*
#+end_warning

*** Requires ~find-lisp~
You need the package find-lisp installed in your local Emacs config.
#+begin_src emacs-lisp :tangle ./init-page.el
(require 'find-lisp)
#+end_src

*** Initialize local variables
#+NAME: init-webpage
#+begin_src emacs-lisp :tangle ./init-page.el
(defun jp/init-webpage ()
  (defvar jp/url "https://ody5.de")
  (defvar jp/gl-url "https://gitlab.ody5.de")
  (defvar jp/repository "https://gitlab.com/ody55eus/ody55eus.gitlab.io")
  (defvar jp/root (expand-file-name "."))
  (setq-local org-roam-directory (concat
                            jp/root
                            "/source/")
        org-roam-v2-ack t
        org-link-abbrev-alist '(("gitlab" . "https://gitlab.com/")
                                ("github" . "https://github.com/")
                                ("ody5" . (concat jp/gl-url "/"))
                                )
        org-directory (concat
                       jp/root
                       "/source/")
        org-roam-db-location (concat jp/root "/org-roam.db")
        org-id-extra-files (find-lisp-find-files org-roam-directory "\.org$")
        org-roam-capture-templates '(("d" "default" plain
                                      "%?\n\nSee also %a.\n"
                                      :if-new (file+head
                                               "%<%Y%m%d%H%M%S>-${slug}.org"
                                               "#+title: ${title}\n")
                                      :unnarrowed t)
                                     ("j" "Projects" plain
                                      "%?"
                                      :if-new (file+head
                                               "Projects/%<%Y%m%d%H%M%S>-${slug}.org"
                                               "#+title: ${title}\n")
                                      :clock-in :clock-resume
                                      :unnarrowed t
                                      )
                                     ("l" "Literature")
                                     ("ll" "Literature Note" plain
                                      "%?\n\nSee also %a.\n* Links\n- %x\n* Notes\n"
                                      :if-new (file+head
                                               "Literature/%<%Y%m%d%H%M%S>-${slug}.org"
                                               "#+title: ${title}\n")
                                      :unnarrowed t
                                      )
                                     ("lr" "Bibliography reference" plain
                                      "#+ROAM_KEY: %^{citekey}\n#+PROPERTY: type %^{entry-type}\n#+FILETAGS: %^{keywords}\n#+AUTHOR: %^{author}\n%?"
                                      :if-new (file+head
                                               "References/${citekey}.org"
                                               "#+title: ${title}\n")
                                      :unnarrowed t
                                      )
                                     ("c" "Code" plain
                                      "%?\n\nSee also %a.\n"
                                      :if-new (file+head
                                               "Code/%<%Y%m%d%H%M%S>-${slug}.org"
                                               "#+title: ${title}\n#+date: %U")
                                      :unnarrowed t
                                      )
                                     )))
#+end_src

*** End of File (EOF)
#+begin_src emacs-lisp :tangle ./init-page.el
(provide 'init-page)
;;; init-page.el ends here
#+end_src

* Publish
** Gitlab CI
This configuration loads my docker image [[https://hub.docker.com/r/ody55eus/emacs-straight][ody55eus/emacs-straight]] and executes the [[*Publish.el][Publish.el]].
#+begin_src yaml :tangle ./.gitlab-ci.yml
image: ody55eus/emacs-straight

pages:
  script:
    - emacs --quick --script publish.el --funcall=jp/publish-html
  artifacts:
    paths:
      - public
  only:
    - master
#+end_src

** Makefile
#+begin_src makefile :tangle ./Makefile :noweb no-export
##
# Ody55eus.gitlab.io
#
# @version <<gvar("version")>>

make: html

install:
	emacs --quick --script requirements.el

download-puml:
	curl -L http://sourceforge.net/projects/plantuml/files/plantuml.jar/download > ~/plantuml.jar

diag:
	java -jar ~/plantuml.jar diag/*

html:
	emacs --quick --script publish.el --funcall=jp/publish-html

# end
#+end_src

** Publish.el
:Source:
Inspired from [[https://gitlab.com/ambrevar/ambrevar.gitlab.io][ambrevar]] and [[https://gitlab.com/ngm/commonplace][commonplace]].
:END:

*** Install ~org-roam~
Unfortunately the [[github:org-roam/org-roam][org-roam]] package is needed to translate the page. We install this with straight:
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'org-roam)
(require 'ox-publish)
(require 'ox-html)
(require 'org-roam)
(require 'find-lisp)
#+end_src

*** Define ~jp/init-webpage~
Same as in [[*Initialize local variables][Initialize local variables]]:
#+begin_src emacs-lisp :tangle ./publish.el :noweb yes
<<init-webpage>>
#+end_src

*** Set important export variables
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(jp/init-webpage)

;; Timestamps can be used to avoid rebuilding everything.
;; This is useful locally for testing.
;; It won't work on Gitlab when stored in ./: the timestamps file should
;; probably be put inside the public/ directory.  It's not so useful there
;; however since generation is fast enough.
(setq org-publish-use-timestamps-flag t
      org-publish-timestamp-directory "./")

;; Get rid of index.html~ and the like that pop up during generation.
(setq make-backup-files nil)

(setq org-export-with-section-numbers nil
      org-export-with-smart-quotes t
      org-export-with-email t
      org-export-with-date t
      org-export-with-tags 'not-in-toc
      org-export-with-toc t)

#+end_src

*** Preamble
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(defun jp/preamble (info)
  "Return preamble as a string."
  (let* ((file (plist-get info :input-file))
         (prefix (file-relative-name (expand-file-name "source" jp/root)
                                     (file-name-directory file))))
    (format
     "<a href=\"%1$s/index.html\">About</a>
<a href=\"%1$s/projects.html\">Projects</a>
<a href=\"%1$s/Literature/index.html\">Literature</a>
<a href=\"%1$s/References/index.html\">Links</a>"
     prefix)))

#+end_src

*** Postamble
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(setq ;; org-html-divs '((preamble "header" "top")
 ;;                 (content "main" "content")
 ;;                 (postamble "footer" "postamble"))
 org-html-postamble t
 org-html-postamble-format `(("en" ,(concat "<p class=\"comments\"><a href=\""
                                            jp/repository "/issues\">Comments</a></p>
<p class=\"date\">Date: %u</p>
<p class=\"creator\">Made with %c</p>
<p class=\"license\">
  <a rel=\"license\" href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\"><img alt=\"GNU General Public License\" width=\"50px\" style=\"border-width:0\" src=\"https://www.gnu.org/graphics/gplv3-127x51.png\" /></a>
  <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" width=\"50px\" style=\"border-width:0\" src=\"https://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-sa.png\" /></a>
</p>")))
 ;; Use custom preamble function to compute relative links.
 org-html-preamble #'jp/preamble
 ;; org-html-container-element "section"
 org-html-metadata-timestamp-format "%Y-%m-%d"
 org-html-checkbox-type 'html
 org-html-html5-fancy t
 ;; Use custom .css.  This removes the dependency on `htmlize', but then we
 ;; don't get colored code snippets.
 org-html-htmlize-output-type nil
 org-html-validation-link nil
 org-html-doctype "html5")

#+end_src

*** Define some git and string format helper
**** Git Helper
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
;; Some help functions
(defun jp/git-creation-date (file)
  "Return the first commit date of FILE.
Format is %Y-%m-%d."
  (with-temp-buffer
    (call-process "git" nil t nil "log" "--reverse" "--date=short" "--pretty=format:%cd" file)
    (goto-char (point-min))
    (buffer-substring-no-properties (line-beginning-position) (line-end-position))))

(defun jp/git-last-update-date (file)
  "Return the last commit date of FILE.
Format is %Y-%m-%d."
  (with-output-to-string
    (with-current-buffer standard-output
      (call-process "git" nil t nil "log" "-1" "--date=short" "--pretty=format:%cd" file))))

(defun jp/org-html-format-spec (info)
  "Return format specification for preamble and postamble.
INFO is a plist used as a communication channel.
Just like `org-html-format-spec' but uses git to return creation and last update
dates.
The extra `u` specifier displays the creation date along with the last update
date only if they differ."
  (let* ((timestamp-format (plist-get info :html-metadata-timestamp-format))
         (file (plist-get info :input-file))
         (meta-date (org-export-data (org-export-get-date info timestamp-format)
                                     info))
         (creation-date (if (string= "" meta-date)
                            (jp/git-creation-date file)
                          ;; Default to the #+DATE value when specified.  This
                          ;; can be useful, for instance, when Git gets the file
                          ;; creation date wrong if the file was renamed.
                          meta-date))
         (last-update-date (jp/git-last-update-date file)))
    `((?t . ,(org-export-data (plist-get info :title) info))
      (?s . ,(org-export-data (plist-get info :subtitle) info))
      (?d . ,creation-date)
      (?T . ,(format-time-string timestamp-format))
      (?a . ,(org-export-data (plist-get info :author) info))
      (?e . ,(mapconcat
	      (lambda (e) (format "<a href=\"mailto:%s\">%s</a>" e e))
	      (split-string (plist-get info :email)  ",+ *")
	      ", "))
      (?c . ,(plist-get info :creator))
      (?C . ,last-update-date)
      (?v . ,(or (plist-get info :html-validation-link) ""))
      (?u . ,(if (string= creation-date last-update-date)
                 creation-date
               (format "%s (<a href=%s>Last update: %s</a>)"
                       creation-date
                       (format "%s/commits/master/%s" jp/repository (file-relative-name file jp/root))
                       last-update-date))))))
(advice-add 'org-html-format-spec :override 'jp/org-html-format-spec)

#+end_src

**** Find Date
~jp/org-publish-find-date~ is just like ~org-publish-find-date~ just uses git instead and does not fall back on file
system timestamp and returns nil instead.
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(defun jp/org-publish-find-date (file project)
  "Find the date of FILE in PROJECT.
Just like `org-publish-find-date' but do not fall back on file
system timestamp and return nil instead."
  (let ((file (org-publish--expand-file-name file project)))
    (or (org-publish-cache-get-file-property file :date nil t)
    (org-publish-cache-set-file-property
     file :date
     (let ((date (org-publish-find-property file :date project)))
       ;; DATE is a secondary string.  If it contains
       ;; a time-stamp, convert it to internal format.
       ;; Otherwise, use FILE modification time.
           (let ((ts (and (consp date) (assq 'timestamp date))))
         (and ts
          (let ((value (org-element-interpret-data ts)))
            (and (org-string-nw-p value)
             (org-time-string-to-time value))))))))))
#+end_src

*** Sitemap
**** Define ~jp/org-publish-sitemap~
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(defun jp/org-publish-sitemap (title list)
  "Outputs site map, as a string.
See `org-publish-sitemap-default'. "
  ;; Remove index and non articles.
  (setcdr list (seq-filter
                (lambda (file)
                  (string-match "file:[^ ]*Projects/.*.org" (car file)))
                (cdr list)))
  ;; TODO: Include subtitle?  It may be wiser, at least for projects.
  (concat "#+TITLE: " title "\n"
          "#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"dark.css\">"
          "\n"
          "#+HTML_HEAD: <link rel=\"icon\" type=\"image/x-icon\" href=\"logo.png\"> "
          "\n"
          (org-list-to-org list)))
#+end_src

**** Define ~jp/org-publish-sitemap-entry~
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(defun jp/org-publish-sitemap-entry (entry style project)
  "Custom format for site map ENTRY, as a string.
See `org-publish-sitemap-default-entry'."
  (cond ((not (directory-name-p entry))
         (let* ((meta-date (jp/org-publish-find-date entry project))
                (file (expand-file-name entry
                                        (org-publish-property :base-directory project)))
                (creation-date (if (not meta-date)
                                   (jp/git-creation-date file)
                                 ;; Default to the #+DATE value when specified.  This
                                 ;; can be useful, for instance, when Git gets the file
                                 ;; creation date wrong if the file was renamed.
                                 (format-time-string "%Y-%m-%d" meta-date)))
                (last-date (jp/git-last-update-date file)))
           (format "[[file:%s][%s]]^{ (%s)}"
                   entry
                   (org-publish-find-title entry project)
                   (if (string= creation-date last-date)
                       creation-date
                     (format "%s, updated %s" creation-date last-date)))))
	((eq style 'tree)
	 ;; Return only last subdir.
	 (capitalize (file-name-nondirectory (directory-file-name entry))))
	(t entry)))
#+end_src

*** Setting ~org-publish-project-alist~
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(setq org-publish-project-alist
      (list
       (list "site-org"
             :base-directory "./source/"
             :recursive t
             :publishing-function '(org-html-publish-to-html)
             :publishing-directory "./public/" ; TODO: Set dir relative to root so that we can use "C-c C-e P".
             :sitemap-format-entry #'jp/org-publish-sitemap-entry
             :auto-sitemap t
             :sitemap-title "Projects"
             :sitemap-filename "projects.org"
             ;; :sitemap-file-entry-format "%d *%t*"
             :sitemap-style 'list
             :sitemap-function #'jp/org-publish-sitemap
             ;; :sitemap-ignore-case t
             :sitemap-sort-files 'anti-chronologically
             :html-head-include-default-style nil
             :html-head-include-scripts nil
             :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"../dark.css\">
<link rel=\"icon\" type=\"image/x-icon\" href=\"../logo.png\">")
       (list "site-static"
             :base-directory "source/"
             :exclude "\\.org\\'"
             :base-extension 'any
             :publishing-directory "./public"
             :publishing-function 'org-publish-attachment
             :recursive t)
       (list "site" :components '("site-org"))))
#+end_src

*** Define ~jp/publish-html~
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(defun jp/publish-html ()
  (org-roam-setup)
  (org-id-update-id-locations)
  (org-publish-all)
  )
#+end_src

*** End of File (EOF)
#+begin_src emacs-lisp :tangle ./publish.el :noweb no-export
(provide 'publish)
;;; publish.el ends here
#+end_src

* Build
- Install Requirements:
  + Emacs
- Just run the following command, to deploy all:
  #+begin_src sh
emacs --quick --script publish.el --funcall=jp/publish-html
  #+end_src

* Deploy
Just download the latest archive from gitlab and extract with ~tar~:
#+begin_src sh :tangle deploy.sh :shebang "#!/usr/bin/env zsh\nset -euo pipefail\n"
tar xzf public.tar.gz
#+end_src

* License
This content is licensed under the Creative Commons Attribution-ShareAlike 4.0
International License. To view a copy of this license, visit
[[http://creativecommons.org/licenses/by-sa/4.0/]]

The code creating these pages is licensed under [[https://www.gnu.org/licenses/gpl-3.0.en.html][GNU GPLv3]].

Copyright (C) 2021 Jonathan Pieper

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
